public class Algorithm_Q179 {
    /*
     * 이 문제는 비트 연산에 대한 이해를 바탕으로 푸는 문제다.
     * https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/
     * 풀이를 확인해보자.
     */

    public int minFlips(int a, int b, int c) {
        int answer = 0;

        while(a != 0 | b != 0 | c != 0) {
            // 최소 비트수를 뒤집어서 c를 만들려면 우선 해당 숫자들을 비트로 전환해 가며 이동 시키고
            // 최소 비트에서 c의 값을 얻은 후 여기에 따른 a, b 2개 비트의 값이 어떻게 되어야 하는지 체크해
            // 플립할 수를 구한다.
            if((c & 1) == 1) {
                // 만약 c의 최소 비트가 1이면 a,b 2개 숫자는 반드시 둘 중 하나는 1 이어야 한다.
                // 따라서 0으로 서로 같다면 1회 플립한다.
                if((a & 1) == 0 && (b & 1) == 0) {
                    answer += 1;
                }
            } else {
                // if와 반대되는 경우에는 모든 값이 0이 되도록 flip을 시켜야 한다.
                // 즉 이는 만약 각 최소 비트가 1이라면 한번 뒤집어야 하기 때문에 1을 더하고 0 이라면
                // 더하지 않아도 된다는 점을 활용하여 아래와 같이 적는다.
                // c & 1 == 0
                answer += (a & 1) + (b & 1);
            }

            // 3개 숫자를 모두 오른쪽 한칸 비트 이동을 시킨 후 빈공간은 음수의경우엔 1, 양수의 경우엔 0으로 채움
            a >>= 1;
            b >>= 1;
            c >>= 1;
        }

        // 결과를 리턴한다.
        return answer;
    }
}
